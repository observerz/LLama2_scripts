# 与构建训练集prompt相似，需要统计行号，还要知道每组对话的第一句是哪句（可通过行号和每组对话二元组的右边界知道这组对话已经结束）
# 读取测试集第K句，与第k-3句拼接，其中有些句子是backtranslation，构建prompt
# 所有操作都有文件读取和写入
testcolList = [(1, 17), (18, 42), (43, 68), (69, 100), (101, 117), (118, 137), (138, 171), (172, 203), (204, 230), (231, 243), (244, 268), (269, 287), (288, 319), (320, 355), (356, 401), (402, 421), (422, 463), (464, 502), (503, 528), (529, 551), (552, 568), (569, 590), (591, 622), (623, 642), (643, 661), (662, 692), (693, 710), (711, 741), (742, 764), (765, 789), (790, 810), (811, 869), (870, 895), (896, 915), (916, 947), (948, 962), (963, 998), (999, 1043), (1044, 1060), (1061, 1074), (1075, 1092), (1093, 1114), (1115, 1152), (1153, 1178), (1179, 1194), (1195, 1239), (1240, 1257), (1258, 1275), (1276, 1294), (1295, 1320), (1321, 1338), (1339, 1376), (1377, 1391), (1392, 1419), (1420, 1433), (1434, 1462), (1463, 1530), (1531, 1561), (1562, 1578), (1579, 1604), (1605, 1620), (1621, 1636), (1637, 1664), (1665, 1698), (1699, 1726), (1727, 1750), (1751, 1768), (1769, 1800), (1801, 1821), (1822, 1840), (1841, 1867), (1868, 1891), (1892, 1920), (1921, 1967), (1968, 2005), (2006, 2024), (2025, 2067), (2068, 2100)]

test_en_list = [1, 4, 6, 9, 10, 12, 13, 14, 16, 18, 20, 22, 24, 28, 30, 31, 33, 35, 37, 39, 41, 43, 45, 47, 48, 51, 52, 54, 56, 58, 61, 63, 65, 67, 70, 71, 73, 75, 77, 78, 80, 84, 87, 90, 92, 93, 95, 97, 98, 100, 101, 103, 105, 107, 108, 110, 112, 113, 115, 116, 118, 119, 122, 123, 125, 126, 128, 130, 132, 133, 136, 137, 138, 141, 143, 145, 146, 149, 150, 152, 154, 156, 158, 161, 163, 165, 166, 168, 169, 171, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 193, 195, 197, 199, 201, 203, 205, 208, 210, 213, 215, 221, 224, 226, 228, 230, 231, 233, 235, 237, 239, 241, 243, 244, 246, 248, 250, 252, 254, 256, 258, 260, 261, 263, 265, 266, 268, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 288, 290, 293, 294, 296, 298, 300, 301, 303, 305, 306, 308, 310, 312, 314, 315, 317, 318, 319, 320, 321, 324, 325, 328, 329, 334, 335, 338, 339, 340, 341, 344, 345, 348, 349, 352, 353, 356, 358, 360, 362, 364, 367, 368, 370, 372, 373, 375, 377, 379, 381, 382, 384, 385, 387, 388, 390, 393, 394, 395, 396, 398, 399, 401, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 435, 436, 438, 439, 440, 442, 444, 446, 447, 449, 452, 454, 455, 457, 459, 461, 462, 464, 467, 468, 469, 471, 473, 474, 475, 477, 479, 481, 483, 484, 486, 488, 490, 491, 493, 494, 495, 497, 498, 499, 501, 502, 503, 505, 507, 509, 511, 513, 514, 516, 517, 519, 520, 522, 523, 525, 526, 528, 530, 532, 534, 536, 538, 540, 542, 545, 547, 549, 550, 552, 554, 556, 558, 560, 562, 565, 567, 569, 571, 573, 575, 577, 579, 581, 584, 586, 588, 590, 591, 593, 596, 597, 599, 600, 602, 605, 607, 609, 611, 613, 616, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 652, 654, 655, 656, 658, 660, 661, 662, 664, 665, 667, 669, 671, 673, 675, 676, 678, 680, 682, 684, 686, 687, 689, 691, 692, 693, 695, 697, 698, 700, 702, 703, 705, 706, 708, 709, 711, 713, 715, 717, 718, 719, 721, 723, 725, 726, 728, 730, 732, 733, 734, 735, 736, 738, 740, 741, 743, 744, 746, 748, 750, 751, 754, 755, 757, 758, 759, 761, 762, 763, 765, 767, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 803, 805, 806, 808, 809, 812, 814, 816, 818, 820, 822, 823, 825, 826, 828, 830, 831, 833, 835, 837, 839, 842, 844, 845, 848, 849, 851, 854, 855, 857, 859, 860, 862, 864, 866, 867, 869, 871, 872, 874, 876, 878, 880, 881, 882, 883, 885, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 917, 918, 920, 922, 924, 925, 927, 930, 931, 933, 936, 939, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1002, 1004, 1005, 1007, 1009, 1011, 1012, 1014, 1016, 1017, 1020, 1022, 1024, 1026, 1028, 1030, 1031, 1033, 1035, 1038, 1039, 1041, 1042, 1045, 1046, 1048, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1087, 1090, 1092, 1093, 1095, 1097, 1099, 1102, 1105, 1107, 1109, 1110, 1112, 1114, 1115, 1117, 1119, 1121, 1123, 1125, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 1139, 1141, 1142, 1144, 1145, 1147, 1149, 1150, 1152, 1154, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1174, 1176, 1177, 1178, 1179, 1181, 1183, 1185, 1186, 1188, 1190, 1192, 1194, 1195, 1197, 1198, 1201, 1203, 1205, 1208, 1209, 1210, 1212, 1214, 1216, 1217, 1218, 1220, 1222, 1225, 1228, 1230, 1231, 1233, 1234, 1236, 1237, 1239, 1240, 1242, 1244, 1246, 1248, 1250, 1251, 1253, 1254, 1256, 1258, 1260, 1262, 1263, 1265, 1267, 1269, 1271, 1274, 1276, 1278, 1280, 1282, 1284, 1286, 1289, 1291, 1293, 1295, 1297, 1299, 1300, 1302, 1304, 1306, 1308, 1310, 1312, 1314, 1316, 1317, 1319, 1321, 1323, 1325, 1327, 1329, 1331, 1334, 1336, 1338, 1339, 1340, 1342, 1344, 1347, 1349, 1351, 1353, 1355, 1357, 1359, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 1378, 1380, 1381, 1383, 1385, 1386, 1388, 1389, 1391, 1392, 1394, 1396, 1398, 1401, 1404, 1405, 1407, 1409, 1410, 1412, 1414, 1415, 1417, 1419, 1420, 1422, 1424, 1426, 1428, 1430, 1432, 1434, 1436, 1438, 1440, 1442, 1445, 1447, 1449, 1451, 1453, 1455, 1457, 1459, 1461, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 1546, 1548, 1550, 1552, 1554, 1556, 1558, 1560, 1562, 1564, 1566, 1568, 1569, 1570, 1572, 1573, 1575, 1576, 1578, 1580, 1581, 1583, 1585, 1588, 1590, 1592, 1593, 1595, 1597, 1599, 1600, 1601, 1603, 1604, 1605, 1608, 1610, 1612, 1613, 1615, 1617, 1619, 1620, 1622, 1623, 1625, 1628, 1630, 1632, 1634, 1635, 1637, 1639, 1641, 1643, 1645, 1647, 1649, 1651, 1652, 1654, 1655, 1657, 1658, 1660, 1661, 1663, 1665, 1667, 1669, 1671, 1673, 1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 1708, 1710, 1712, 1713, 1715, 1717, 1719, 1721, 1723, 1725, 1727, 1729, 1731, 1732, 1734, 1736, 1738, 1740, 1741, 1743, 1744, 1746, 1748, 1750, 1752, 1754, 1756, 1758, 1760, 1762, 1764, 1766, 1768, 1769, 1772, 1775, 1781, 1782, 1784, 1786, 1788, 1791, 1793, 1795, 1797, 1799, 1802, 1803, 1805, 1808, 1809, 1810, 1812, 1814, 1816, 1818, 1819, 1821, 1822, 1824, 1825, 1827, 1829, 1831, 1832, 1834, 1835, 1836, 1837, 1839, 1840, 1842, 1844, 1846, 1848, 1850, 1852, 1854, 1855, 1856, 1858, 1859, 1861, 1863, 1865, 1866, 1868, 1870, 1874, 1875, 1878, 1879, 1881, 1883, 1884, 1885, 1887, 1889, 1891, 1892, 1894, 1895, 1896, 1898, 1900, 1902, 1904, 1905, 1907, 1909, 1910, 1912, 1914, 1915, 1917, 1919, 1921, 1923, 1925, 1926, 1928, 1930, 1932, 1934, 1936, 1938, 1940, 1942, 1944, 1946, 1948, 1951, 1952, 1954, 1956, 1958, 1960, 1961, 1963, 1965, 1966, 1968, 1970, 1974, 1975, 1981, 1984, 1986, 1988, 1990, 1992, 1994, 1997, 1999, 2000, 2001, 2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018, 2020, 2021, 2023, 2026, 2028, 2030, 2034, 2035, 2037, 2039, 2040, 2043, 2045, 2048, 2050, 2051, 2054, 2055, 2056, 2058, 2060, 2061, 2063, 2066, 2069, 2071, 2073, 2076, 2077, 2079, 2080, 2081, 2084, 2086, 2087, 2090, 2092, 2093, 2095, 2097, 2099]
test_de_list = (2, 3, 5, 7, 8, 11, 15, 17, 19, 21, 23, 25, 26, 27, 29, 32, 34, 36, 38, 40, 42, 44, 46, 49, 50, 53, 55, 57, 59, 60, 62,64, 66, 68, 69, 72, 74, 76, 79, 81, 82, 83, 85, 86, 88, 89, 91, 94, 96, 99, 102, 104, 106, 109, 111, 114, 117, 120, 121, 124, 127,129, 131, 134, 135, 139, 140, 142, 144, 147, 148, 151, 153, 155, 157, 159, 160, 162, 164, 167, 170, 173, 175, 177, 179, 181, 183, 185,187, 189, 191, 194, 196, 198, 200, 202, 204, 206, 207, 209, 211, 212, 214, 216, 217, 218, 219, 220, 222, 223, 225, 227, 229, 232, 234,236, 238, 240, 242, 245, 247, 249, 251, 253, 255, 257, 259, 262, 264, 267, 270, 272, 274, 276, 278, 280, 282, 284, 286, 289, 291, 292,295, 297, 299, 302, 304, 307, 309, 311, 313, 316, 322, 323, 326, 327, 330, 331, 332, 333, 336, 337, 342, 343, 346, 347, 350, 351, 354,355, 357, 359, 361, 363, 365, 366, 369, 371, 374, 376, 378, 380, 383, 386, 389, 391, 392, 397, 400, 403, 405, 407, 409, 411, 413, 415,417, 419, 421, 423, 425, 427, 429, 431, 433, 437, 441, 443, 445, 448, 450, 451, 453, 456, 458, 460, 463, 465, 466, 470, 472, 476, 478,480, 482, 485, 487, 489, 492, 496, 500, 504, 506, 508, 510, 512, 515, 518, 521, 524, 527, 529, 531, 533, 535, 537, 539, 541, 543, 544,546, 548, 551, 553, 555, 557, 559, 561, 563, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 583, 585, 587, 589, 592, 594, 595, 598,601, 603, 604, 606, 608, 610, 612, 614, 615, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 653,657, 659, 663, 666, 668, 670, 672, 674, 677, 679, 681, 683, 685, 688, 690, 694, 696, 699, 701, 704, 707, 710, 712, 714, 716, 720, 722,724, 727, 729, 731, 737, 739, 742, 745, 747, 749, 752, 753, 756, 760, 764, 766, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789,791, 793, 795, 797, 799, 801, 804, 807, 810, 811, 813, 815, 817, 819, 821, 824, 827, 829, 832, 834, 836, 838, 840, 841, 843, 846, 847,850, 852, 853, 856, 858, 861, 863, 865, 868, 870, 873, 875, 877, 879, 884, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909,911, 913, 915, 916, 919, 921, 923, 926, 928, 929, 932, 934, 935, 937, 938, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963,965, 967, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1003, 1006, 1008, 1010, 1013, 1015,1018, 1019, 1021, 1023, 1025, 1027, 1029, 1032, 1034, 1036, 1037, 1040, 1043, 1044, 1047, 1049, 1050, 1052, 1054, 1056, 1058, 1060,1062, 1064, 1066, 1068, 1070, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1086, 1088, 1089, 1091, 1094, 1096, 1098, 1100, 1101, 1103,1104, 1106, 1108, 1111, 1113, 1116, 1118, 1120, 1122, 1124, 1127, 1129, 1131, 1133, 1135, 1137, 1140, 1143, 1146, 1148, 1151, 1153,1156, 1158, 1160, 1162, 1164, 1166, 1168, 1170, 1172, 1175, 1180, 1182, 1184, 1187, 1189, 1191, 1193, 1196, 1199, 1200, 1202, 1204,1206, 1207, 1211, 1213, 1215, 1219, 1221, 1223, 1224, 1226, 1227, 1229, 1232, 1235, 1238, 1241, 1243, 1245, 1247, 1249, 1252, 1255,1257, 1259, 1261, 1264, 1266, 1268, 1270, 1272, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1287, 1288, 1290, 1292, 1294, 1296, 1298,1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1318, 1320, 1322, 1324, 1326, 1328, 1330, 1332, 1333, 1335, 1337, 1341, 1343, 1345,1346, 1348, 1350, 1352, 1354, 1356, 1358, 1360, 1362, 1364, 1366, 1368, 1370, 1372, 1374, 1376, 1379, 1382, 1384, 1387, 1390, 1393,1395, 1397, 1399, 1400, 1402, 1403, 1406, 1408, 1411, 1413, 1416, 1418, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 1439,1441, 1443, 1444, 1446, 1448, 1450, 1452, 1454, 1456, 1458, 1460, 1462, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1532, 1534, 1536, 1538, 1540, 1542, 1544, 1547,1549, 1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567, 1571, 1574, 1577, 1579, 1582, 1584, 1586, 1587, 1589, 1591, 1594, 1596,1598, 1602, 1606, 1607, 1609, 1611, 1614, 1616, 1618, 1621, 1624, 1626, 1627, 1629, 1631, 1633, 1636, 1638, 1640, 1642, 1644, 1646,1648, 1650, 1653, 1656, 1659, 1662, 1664, 1666, 1668, 1670, 1672, 1674, 1676, 1678, 1680, 1682, 1684, 1686, 1688, 1690, 1692, 1694,1696, 1698, 1700, 1702, 1704, 1706, 1707, 1709, 1711, 1714, 1716, 1718, 1720, 1722, 1724, 1726, 1728, 1730, 1733, 1735, 1737, 1739,1742, 1745, 1747, 1749, 1751, 1753, 1755, 1757, 1759, 1761, 1763, 1765, 1767, 1770, 1771, 1773, 1774, 1776, 1777, 1778, 1779, 1780,1783, 1785, 1787, 1789, 1790, 1792, 1794, 1796, 1798, 1800, 1801, 1804, 1806, 1807, 1811, 1813, 1815, 1817, 1820, 1823, 1826, 1828,1830, 1833, 1838, 1841, 1843, 1845, 1847, 1849, 1851, 1853, 1857, 1860, 1862, 1864, 1867, 1869, 1871, 1872, 1873, 1876, 1877, 1880,1882, 1886, 1888, 1890, 1893, 1897, 1899, 1901, 1903, 1906, 1908, 1911, 1913, 1916, 1918, 1920, 1922, 1924, 1927, 1929, 1931, 1933,1935, 1937, 1939, 1941, 1943, 1945, 1947, 1949, 1950, 1953, 1955, 1957, 1959, 1962, 1964, 1967, 1969, 1971, 1972, 1973, 1976, 1977,1978, 1979, 1980, 1982, 1983, 1985, 1987, 1989, 1991, 1993, 1995, 1996, 1998, 2002, 2003, 2005, 2007, 2009, 2011, 2013, 2015, 2017,2019, 2022, 2024, 2025, 2027, 2029, 2031, 2032, 2033, 2036, 2038, 2041, 2042, 2044, 2046, 2047, 2049, 2052, 2053, 2057, 2059, 2062,2064, 2065, 2067, 2068, 2070, 2072, 2074, 2075, 2078, 2082, 2083, 2085, 2088, 2089, 2091, 2094, 2096, 2098, 2100)

import requests
import json,os,sys
import linecache
base_url = "http://localhost:8000"


def create_chat_completion(messages, use_stream=False):
    data = {
        "model": 'llama2',
        "messages": messages,
        "stream": use_stream,
        "max_tokens": 4096,
    }

    response = requests.post(f"{base_url}/v1/chat/completions", json=data, stream=use_stream)
    if response.status_code == 200:
        if use_stream:
            content = []
            for line in response.iter_lines():
                if line:
                    decoded_line = line.decode('utf-8')[6:]
                    try:
                        response_json = json.loads(decoded_line)
                        content.append(response_json.get("choices", [{}])[0].get("delta", {}).get("content", ""))
                    except:
                        pass
                        # print("Special Token:", decoded_line)
            return ''.join(content)
        else:
            decoded_line = response.json()
            content = decoded_line.get("choices", [{}])[0].get("message", "").get("content", "")
            return content
    else:
        print("Error:", response.status_code)
        return None


def main():
    file_name = sys.argv[1]
    src_doc = []
    tgt_doc = []
    lang_id = []
    src_file = 'test.src'
    # tgt_file = 'res_files/chat_ende/prompt3_gat4_1/1600/gen.txt'
    tgt_file = file_name
    src_sent = open(src_file,'r')
    tgt_sent = open(tgt_file,'a')
    doc_list = []
    res_list = []
    res = []
    data = None
    src_lang,tgt_lang = '',''
    src_ctx = ''
    tgt_ctx = ''
    prompt1 = 'Given the provided parallel context, translate the following '
    prompt2 = ' sentence to '
    for pair in testcolList:
        start,end = pair[0],pair[1]
        length = end - start + 1
        tempSrc = []
        lang = []
        for line in range(start,end+1):
            # num = linecache.getline(number,line).strip()
            # lang.append(num)
            temp = linecache.getline(src_file,line).strip()
            tempSrc.append(temp)
        src_doc.append(tempSrc)
        lang_id.append(lang)
    cnt_line = 1
    # print(src_doc[0])
    # print(src_doc[1])
    # exit(0)
    for s_docs in src_doc:
        t_docs = []
        # print(len(s_docs))
        for i in range(len(s_docs)):
            tempSrc = s_docs[i]
            # print(i)
            Src = ''
            if i == 0:
                if cnt_line in test_en_list:# the current src sentence is En
                    src_ctx = 'English Context: '
                    tgt_ctx = 'German Context: '
                    Src += src_ctx.strip() + '\n' + tgt_ctx.strip() + '\n' + prompt1 + 'English' + prompt2 + 'German:\n'+'English Sentence: ' + tempSrc + '\nGerman Sentence: '    
                if cnt_line in test_de_list:
                    src_ctx = 'German Context: '
                    tgt_ctx = 'English Context: '
                    Src += src_ctx.strip() + '\n' + tgt_ctx.strip() + '\n' + prompt1 + 'English' + prompt2 + 'German:\n'+'English Sentence: ' + tempSrc + '\nGerman Sentence: '
            elif 1 <= i <= 2:
                if cnt_line in test_en_list:# the current src sentence is En
                    src_ctx = 'English Context: '
                    tgt_ctx = 'German Context: '
                    tempid = cnt_line - i
                    for k in range(0,i):
                        if tempid in test_en_list:
                            src_ctx += s_docs[k] + ' '
                            tgt_ctx += t_docs[k] + ' '
                        if tempid in test_de_list:
                            src_ctx += t_docs[k] + ' '
                            tgt_ctx += s_docs[k] + ' '
                        tempid += 1
                    Src = src_ctx.strip() + '\n' + tgt_ctx.strip() + '\n' + prompt1 + 'English' + prompt2 + 'German:\n'+'English Sentence: ' + tempSrc + '\nGerman Sentence: '
                if cnt_line in test_de_list:
                    src_ctx = 'German Context: '
                    tgt_ctx = 'English Context: '
                    tempid = cnt_line - i
                    for k in range(0,i):
                        if tempid in test_en_list:
                            src_ctx += t_docs[k] + ' '
                            tgt_ctx += s_docs[k] + ' '
                        if tempid in test_de_list:
                            src_ctx += s_docs[k] + ' '
                            tgt_ctx += t_docs[k] + ' '
                        tempid += 1
                    Src = src_ctx.strip() + '\n' + tgt_ctx.strip() + '\n' + prompt1 + 'German' + prompt2 + 'English:\n'+'German Sentence: ' + tempSrc + '\nEnglish Sentence: '
            else:
                if cnt_line in test_en_list:# the current src sentence is En
                    src_ctx = 'English Context: '
                    tgt_ctx = 'German Context: '
                    tempid = cnt_line - 3
                    for k in range(i-3,i):
                        if tempid in test_en_list:
                            src_ctx += s_docs[k] + ' '
                            tgt_ctx += t_docs[k] + ' '
                        if tempid in test_de_list:
                            src_ctx += t_docs[k] + ' '
                            tgt_ctx += s_docs[k] + ' '
                        tempid += 1
                    Src = src_ctx.strip() + '\n' + tgt_ctx.strip() + '\n' + prompt1 + 'English' + prompt2 + 'German:\n'+'English Sentence: ' + tempSrc + '\nGerman Sentence: '
                if cnt_line in test_de_list:
                    src_ctx = 'German Context: '
                    tgt_ctx = 'English Context: '
                    tempid = cnt_line - 3
                    for k in range(i-3,i):
                        if tempid in test_en_list:
                            src_ctx += t_docs[k] + ' '
                            tgt_ctx += s_docs[k] + ' '
                        if tempid in test_de_list:
                            src_ctx += s_docs[k] + ' '
                            tgt_ctx += t_docs[k] + ' '
                        tempid += 1
                    Src = src_ctx.strip() + '\n' + tgt_ctx.strip() + '\n' + prompt1 + 'German' + prompt2 + 'English:\n'+'German Sentence:' + tempSrc + '\nEnglish Sentence: '
            messages = [
                        {
                            "role": "user",
                            "content": Src
                        }
                    ]
            Tgt = create_chat_completion(messages,True)
            tgt_sent.writelines(Tgt+'\n')
            t_docs.append(Tgt)
            # print(t_docs)
            cnt_line += 1
    
if __name__=='__main__':
    main()
